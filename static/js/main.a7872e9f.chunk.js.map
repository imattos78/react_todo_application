{"version":3,"sources":["components/header/Header.js","components/title/Title.js","components/input/Input.js","components/itemCount/ItemCount.js","components/item/Item.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Title","Input","state","newItemText","updateNewItemText","event","console","log","target","value","setState","handleClick","preventDefault","props","addNewProductFunc","handleKeyPress","charCode","type","placeholder","this","onChange","onKeyPress","onClick","disabled","length","ItemCount","count","date","x","today","Date","dd","getDate","mm","getMonth","getFullYear","Item","bought","text","quantity","App","products","id","uuid","addNewProduct","prodText","productCopy","slice","newProduct","push","boughtProduct","filter","prod","pendingBuy","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7872e9f.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport \"./Header.css\"\n\n\nclass Header extends Component{\n    render() {\n        \n        return (\n            <div className=\"col- top-image\">\n            <div className=\"logo image\"></div>\n            </div> \n\n\n        )\n    }\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport \"./Title.css\"\n\nclass Title extends Component {\n    render() {\n        return(\n            <div className=\"col-12 title input-group mb-3 col- col-sm-\">\n            <h5>Make your Shopping List</h5>\n            </div>\n        );\n    }\n}\nexport default Title;","import React, { Component } from \"react\";\nimport \"./Input.css\"\n\n\n    \n//controlled Component\n\nclass Input extends Component {\n  state = {\n    newItemText: \"\"\n  }\n  //Functions that update states must always live where the state lives\n  updateNewItemText = event => {\n    console.log(event.target.value);\n    //This funciton should update the state when someone types something\n    this.setState({\n      newItemText: event.target.value\n    });\n  }\n  handleClick = (event) => {\n    event.preventDefault();\n    this.props.addNewProductFunc(this.state.newItemText);\n    this.setState({\n      newItemText: \"\"\n    });\n  }\n  handleKeyPress = (event) => {\n    if(event.charCode  === 13){\n      this.props.addNewProductFunc(this.state.newItemText);\n      this.setState({\n        newItemText: \"\"\n      });\n    }\n  }\n\n  \n  render() {\n    return (\n      <div className=\"input-group\">\n        <div className=\"custom-file input\">\n\n          <input\n\n            className=\"form-control input-bar\"\n            type=\"text\"\n            placeholder=\"Product name\"\n            value={this.state.newItemText}\n            onChange={this.updateNewItemText}\n            onKeyPress={this.handleKeyPress}\n\n          ></input>\n\n          <div className=\"button show\">\n            <button type=\"button\" className=\"buttons\" onClick={this.handleClick}  disabled={this.state.newItemText.length === 0}><i className=\"fas fa-cart-plus add-icon\"></i></button>\n          </div>\n          <div className=\"button d-none d-md-block\">\n            <button type=\"button\" className=\"add-button\" onClick={this.handleClick} disabled={this.state.newItemText.length === 0}>Add</button>\n          </div>\n        </div>\n\n      </div>\n    );\n\n  }\n}\n\n\n\nexport default Input","import React, {Component} from \"react\"\nimport \"./ItemCount.css\"\n\nclass ItemCount extends Component{\n    render(){\n        return (\n            <div className=\"row d-none d-md-block\">\n            <div className=\"col intro-component\">\n                <h5>You have {this.props.count} products to buy in the list:</h5>\n               \n            </div>\n        </div>\n       \n\n        );\n    }\n}\n\nexport default ItemCount;","import React, { Component } from \"react\"\nimport \"./style.css\"\n\nfunction date(x) {\n    let today = new Date();\n    let dd = today.getDate() + x;\n    let mm = today.getMonth() + 1; //As January is 0.\n    let yyyy = today.getFullYear();\n\n    if (dd < 10) dd = '0' + dd;\n    if (mm < 10) mm = '0' + mm;\n    return (yyyy + \"-\" + mm + \"-\" + dd);\n};\n\nclass Item extends Component {\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                    <table className=\"table table-sm table-borderless\">\n                        <tbody className=\"text\">\n                            <tr className=\"text-align\">\n                                <td><i className=\"fas fa-angle-right arrow\">\n                                </i></td>\n                                <td> {!this.props.bought && this.props.text}</td>\n                                <td>{this.props.bought ? this.props.text : this.props.quantity}</td>\n                                <td>{this.props.date === date(0) ? \"Today\" : this.props.date === date(1) ? \"Tomorrow\" : this.props.date === date(-1) ? \"Yesterday\" : this.props.date}</td>\n\n                            </tr>\n                        </tbody>\n                        {/* <p id=\"prod-to-buy\" className={this.props.bought ? \"bought\" : ''}>\n                            <i className=\"fas fa-angle-right arrow\">\n                            </i> {this.props.text}</p> */}\n                    </table>\n                </div>\n\n                {/* Small buttons */}\n                <div className=\"col-6 show left\">{!this.props.bought && (\n                    <button type=\"button\" className=\"buttons\"><i className=\"fas fa-check-circle check-icon\"></i></button>)}\n                </div>\n                <div className={this.props.bought ? \"col-1 show right\" : \"col-1 show\"}>\n                    <button type=\"button\" className=\"buttons\"><i className=\"fas fa-times-circle cruz-icon\"></i></button>\n                </div>\n                {/* Big buttons */}\n                <div className=\"col-3 b-left d-none d-md-block\">{!this.props.bought && (\n\n                    <button type=\"button\" className=\"add-button\">Done </button>)}\n                </div>\n                <div className=\" col-3 b-rigth d-none d-md-block\">\n                    <button type=\"button\" className=\"del-button\">Delete</button>\n                </div>\n            </div >\n\n\n\n\n        );\n    }\n}\n\nexport default Item\n\n","import React, { Component } from 'react';\nimport uuid from \"uuid/v4\";\nimport Header from \"./components/header/Header\";\nimport Title from \"./components/title/Title\";\nimport Input from \"./components/input/Input\";\nimport ItemCount from \"./components/itemCount/ItemCount\";\nimport Item from \"./components/item/Item\";\nimport './App.css';\n\nfunction date() {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth() + 1; //As January is 0.\n  let yyyy = today.getFullYear();\n\n  if (dd < 10) dd = '0' + dd;\n  if (mm < 10) mm = '0' + mm;\n  return (yyyy + \"-\" + mm + \"-\" + dd);\n};\n\nclass App extends Component {\n  state = {\n    products: [\n      {text: \"Tomato\", quantity: 2, bought: true, date: \"2019-10-27\", id: uuid()},\n      {text: \"Avocado\",quantity: 3, bought: true, date: \"2019-10-28\", id: uuid()},\n      {text: \"Bread\", quantity: 1, bought: false, date: \"2019-10-30\", id: uuid()},\n      {text: \"Water\", quantity: 3,bought: false, date: \"2019-10-29\", id: uuid()},\n      {text: \"Beer\", quantity: 6,bought: true, date: \"2019-10-21\", id: uuid()},\n      {text: \"Pizza\", quantity: 1,bought: false, date: \"2019-10-22\", id: uuid()}\n\n    ]\n  }\n  //This func should update the state with a new task\n  addNewProduct = prodText =>{\n    const productCopy = this.state.products.slice();\n    const newProduct = {\n      text: prodText,\n      bought: false,\n      date: date(),\n      id: uuid()\n    }\n    productCopy.push(newProduct)\n    this.setState({\n      products: productCopy\n    });\n   }\n  render() {\n\n  const boughtProduct = this.state.products.filter(prod =>{return prod.bought}) \n  const pendingBuy = this.state.products.filter(prod => !prod.bought);\n  \n  \n  return (\n    <div className=\"container\">\n      <Header />\n      <Title />\n      <Input addNewProductFunc={this.addNewProduct} />\n      <ItemCount count={pendingBuy.length} />\n      {pendingBuy.map(prod => <Item text={prod.text} bought={prod.bought} quantity={prod.quantity} date={prod.date} key={prod.id} />\n        )}\n\n         <h5 className=\"title\">You recently bought: </h5>\n       \n        {boughtProduct.map(prod => <Item text={prod.text} bought={prod.bought} key={prod.id} />\n        )}\n   \n     \n      \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}